Link:
https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping/description/

Description:
You are given a string s formed by digits and '#'. We want to map s to English lowercase characters as follows:

Characters ('a' to 'i') are represented by ('1' to '9') respectively.
Characters ('j' to 'z') are represented by ('10#' to '26#') respectively.
Return the string formed after mapping.

The test cases are generated so that a unique mapping will always exist.

 

Example 1:

Input: s = "10#11#12"
Output: "jkab"
Explanation: "j" -> "10#" , "k" -> "11#" , "a" -> "1" , "b" -> "2".
Example 2:

Input: s = "1326#"
Output: "acz"
 

Constraints:

1 <= s.length <= 1000
s consists of digits and the '#' letter.
s will be a valid string such that mapping is always possible.

Solution:
class Solution:
    def freqAlphabets(self, s: str) -> str:
        s = list(s)
        ans=[]
        for i in range(len(s)):
            if i not in range(len(s)-2, len(s)) and s[i+2]!='#' and s[i+1]!='#' and s[i]!='#':
                ans.append(s[i])
            elif s[i]=='#' or i not in range(len(s)-2, len(s)) and s[i+1]=='#':
                continue
            elif i==len(s)-3 and s[i+2]=='#':
                ans.append(s[i]+s[i+1])
                break
            elif i in range(len(s)-2, len(s)):
                ans.append(s[i])
            else:
                ans.append(s[i]+s[i+1])
        abc=[]
        for i in range(len(ans)):
            abc.append(chr(ord('a') + (int(ans[i])-1)))
        return ''.join(abc)
