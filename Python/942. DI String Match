Link:
https://leetcode.com/problems/di-string-match/description/

Description:
A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

s[i] == 'I' if perm[i] < perm[i + 1], and
s[i] == 'D' if perm[i] > perm[i + 1].
Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.

 

Example 1:

Input: s = "IDID"
Output: [0,4,1,3,2]
Example 2:

Input: s = "III"
Output: [0,1,2,3]
Example 3:

Input: s = "DDI"
Output: [3,2,0,1]
 

Constraints:

1 <= s.length <= 105
s[i] is either 'I' or 'D'.

Solution:
class Solution:
    def diStringMatch(self, s: str) -> List[int]:
        s = list(s)
        a = list(range(0, len(s)+1))
        b = a[::-1]
        ans=[]
        for i in range(len(s)):
            if s[i]=='I':
                ans.append(a[0])
                a.pop(0)
            else:
                ans.append(b[0])
                b.pop(0)
        ans.append(a[0])
        return ans
